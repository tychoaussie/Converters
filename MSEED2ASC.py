# -*- coding: utf-8 -*-

'''The MIT License (MIT)

Copyright (c) 2013 Daniel Burk

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.'''


__author__ = "Daniel Burk <burkdani@msu.edu>"
__version__ = "20130906"
__license__ = "MIT"

# -*- coding: utf-8 -*-



import sys, numpy as np, csv, time, string
from obspy.core import read, Trace, Stream, UTCDateTime
from obspy.sac import SacIO

# Now, the most important part -- The legalese:
# COPYRIGHT ©  BOARD OF TRUSTEES OF MICHIGAN STATE UNIVERSITY
# ALL RIGHTS RESERVED

# PERMISSION IS GRANTED TO USE, COPY, COMBINE AND/OR MERGE, CREATE DERIVATIVE
# WORKS AND REDISTRIBUTE THIS SOFTWARE AND SUCH DERIVATIVE WORKS FOR ANY PURPOSE,
# SO LONG AS THE NAME OF MICHIGAN STATE UNIVERSITY IS NOT USED IN ANY ADVERTISING
# OR PUBLICITY PERTAINING TO THE USE OR DISTRIBUTION OF THIS SOFTWARE WITHOUT 
# SPECIFIC, WRITTEN PRIOR AUTHORIZATION.  IF THE ABOVE COPYRIGHT NOTICE OR ANY
# OTHER IDENTIFICATION OF MICHIGAN STATE UNIVERSITY IS INCLUDED IN ANY COPY OF 
# ANY PORTION OF THIS SOFTWARE, THEN THE DISCLAIMER BELOW MUST ALSO BE INCLUDED.

# THIS SOFTWARE IS PROVIDED AS IS, WITHOUT REPRESENTATION FROM MICHIGAN STATE
# UNIVERSITY AS TO ITS FITNESS FOR ANY PURPOSE, AND WITHOUT WARRANTY BY MICHIGAN
# STATE UNIVERSITY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
# LIMITATION THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE.

# THE MICHIGAN STATE UNIVERSITY BOARD OF TRUSTEES SHALL NOT BE LIABLE FOR ANY
# DAMAGES, INCLUDING SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES,
# WITH RESPECT TO ANY CLAIM ARISING OUT OF OR IN CONNECTION WITH THE USE OF
# THE SOFTWARE, EVEN IF IT HAS BEEN OR IS HEREAFTER ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGES.

class ASCconvertError(Exception):

    def __init__(self, error_name, error_text):
        self.args = (error_name, error_text)
        self.error_name = error_name
        self.error_text = error_text

    def __str__(self):
        return repr('{0}: {1}'.format(self.error_name, self.error_text))

class ASCconvert(object):
    '''ASCconvert is a utility for converting ascii files generated by PAK2ASCII 
       into the SU ascii format compatable with the ObsPy read.su module.
       Once reformatted, ObsPy may be used to convert the data into SAC or even
       Miniseed format.
       
       Useage: Activate Python's ObsPy package, then from the command prompt
       specify the target file and the output filename. If no output filename
       is provided, the default will be called output.ASC in your current
       working directory. 

       Syntax: ASCconvert infile_name outfile_name -s

       -s is an optional command line switch for also creating a series of SAC files
       from your ascii dataset as specified by the input. Only the first three channels
       are at present converted by this code.

       Typical useage:
       <ObsPy> C:\Python27\scripts> python ASCconvert.py /../infil.ASC /../out.ASC -s

    '''



def main():
#           MAIN PROGRAM BODY
#  Parse the command line switches
    optioncount = len(sys.argv)
    SAC = False
    if optioncount > 1:
        if optioncount >= 4:
            if sys.argv[3] == '-s':
                SAC = True
#               print "SAC set to true."
                outfile = sys.argv[2]
                infile = sys.argv[1]
        elif optioncount >= 3:
            outfile = sys.argv[2]
#           print "Outfile set at sys.argv[3] to {0}".format(outfile)
            infile = sys.argv[1]
        elif optioncount == 2:
            infile = sys.argv[1]
#            print infile
            if string.find(infile,'.') > 0:
                outfile = infile[:string.find(infile,'.')]+'.sac'
            else:
                outfile = infile +'_(1).sac'
#           print "Outfile set at sys.argv[2] to {0}".format(outfile)        



            seismic = read(infile)      # READ the miniseed file
#
#             Change the outfile extension to .sac or at least add it. 
#
            if string.find(infile,'.') > 0:
                target = infile[:string.find(infile,'.')]+'.sac'
            else:
                target = infile +'.asc'

            seismic.write(target,format='SH_ASC')

            print "ASC file output to : {0}".format(target)
    else:
        print "Useage: MSEEDconvert infile.mseed (outfile.asc) (-s)"
        print "No infile specified."
        print len(sys.argv)

#
# Check and run the main function here:
#
if __name__ == '__main__':
  main()
